/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator

import dk.sdu.mmmi.mdsd.math.Div
import dk.sdu.mmmi.mdsd.math.LetBinding
import dk.sdu.mmmi.mdsd.math.MathNumber
import dk.sdu.mmmi.mdsd.math.Minus
import dk.sdu.mmmi.mdsd.math.Mult
import dk.sdu.mmmi.mdsd.math.Plus
import dk.sdu.mmmi.mdsd.math.VarBinding
import dk.sdu.mmmi.mdsd.math.VariableUse
import java.util.HashMap
import java.util.Map
import javax.swing.JOptionPane
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dk.sdu.mmmi.mdsd.math.MathProgram
import java.util.List
import dk.sdu.mmmi.mdsd.math.ExternalDeclaration
import dk.sdu.mmmi.mdsd.math.IntType

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val math = resource.allContents.filter(MathProgram).next
		math.generateJavaFile(fsa)
	}
	
	def void generateJavaFile(MathProgram program, IFileSystemAccess2 fsa) {
		var content = program.generateJavaContent
		fsa.generateFile(program.name + ".java", content)
	}
	
	def String generateJavaContent(MathProgram program) {
		return '''
		package math_expression.test;
		
		«program.generateJavaClass»
		
		'''
	}
	
	def String generateJavaClass(MathProgram program) {
		return '''
		public class «program.name» {
			«IF program.usesExternalFunctions»
				«program.externalFunctions.generateInterface»
			«ENDIF»
			
			«FOR varBind : program.variables SEPARATOR "\n"»
				public int «varBind.name»;
			«ENDFOR»
		
			«IF program.usesExternalFunctions»
				private External external;
				
				public «program.name» (External external) {
					this.external = external;
				}
			«ENDIF»
			
			public void compute() {
				«FOR varBind : program.variables»
				«varBind.name» = compute«varBind.name.toFirstUpper»();
				«ENDFOR»
			}
			
			«FOR varBind : program.variables SEPARATOR "\n\n"»
			«varBind.generateComputeFunction»
			«ENDFOR»
		}
		'''
	}
	
	def String generateInterface(List<ExternalDeclaration> externalFuncs) {
		return '''
		interface External {
			«FOR exFunc : externalFuncs»
				int «exFunc.name»(«exFunc.generateParamList»);
			«ENDFOR»
		}
		'''
	}
	
	def String generateParamList(ExternalDeclaration external) {
		var res = "";
		var initialChar = 109;
		
		for (var i = 0; i < external.parameters.size; i++) {
			res += switch (external.parameters.get(i)) {
				IntType: "int "
			}
			
			res += (initialChar + i) as char;
			
			if (i < external.parameters.size-1)
				res += ", "
		}
		
		return res;
	}
	
	def String generateComputeFunction(VarBinding varBind) {
		return '''
			private int compute«varBind.name.toFirstUpper»() {
				«ExpressionGenerator.generateStatements(varBind.expression)»
			}
		'''
	}
	
	def boolean usesExternalFunctions(MathProgram program) {
		return program.externalFunctions.size > 0
	}
}
