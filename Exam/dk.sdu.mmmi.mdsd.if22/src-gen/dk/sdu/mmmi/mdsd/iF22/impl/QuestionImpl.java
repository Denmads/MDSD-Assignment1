/**
 * generated by Xtext 2.26.0
 */
package dk.sdu.mmmi.mdsd.iF22.impl;

import dk.sdu.mmmi.mdsd.iF22.Exp;
import dk.sdu.mmmi.mdsd.iF22.IF22Package;
import dk.sdu.mmmi.mdsd.iF22.Question;
import dk.sdu.mmmi.mdsd.iF22.Target;
import dk.sdu.mmmi.mdsd.iF22.VariableDef;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Question</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dk.sdu.mmmi.mdsd.iF22.impl.QuestionImpl#getTypeAndValidation <em>Type And Validation</em>}</li>
 *   <li>{@link dk.sdu.mmmi.mdsd.iF22.impl.QuestionImpl#getVariable <em>Variable</em>}</li>
 *   <li>{@link dk.sdu.mmmi.mdsd.iF22.impl.QuestionImpl#getTargets <em>Targets</em>}</li>
 * </ul>
 *
 * @generated
 */
public class QuestionImpl extends StatementImpl implements Question
{
  /**
   * The cached value of the '{@link #getTypeAndValidation() <em>Type And Validation</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeAndValidation()
   * @generated
   * @ordered
   */
  protected Exp typeAndValidation;

  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected VariableDef variable;

  /**
   * The cached value of the '{@link #getTargets() <em>Targets</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTargets()
   * @generated
   * @ordered
   */
  protected EList<Target> targets;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QuestionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IF22Package.Literals.QUESTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exp getTypeAndValidation()
  {
    return typeAndValidation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTypeAndValidation(Exp newTypeAndValidation, NotificationChain msgs)
  {
    Exp oldTypeAndValidation = typeAndValidation;
    typeAndValidation = newTypeAndValidation;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, IF22Package.QUESTION__TYPE_AND_VALIDATION, oldTypeAndValidation, newTypeAndValidation);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTypeAndValidation(Exp newTypeAndValidation)
  {
    if (newTypeAndValidation != typeAndValidation)
    {
      NotificationChain msgs = null;
      if (typeAndValidation != null)
        msgs = ((InternalEObject)typeAndValidation).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - IF22Package.QUESTION__TYPE_AND_VALIDATION, null, msgs);
      if (newTypeAndValidation != null)
        msgs = ((InternalEObject)newTypeAndValidation).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - IF22Package.QUESTION__TYPE_AND_VALIDATION, null, msgs);
      msgs = basicSetTypeAndValidation(newTypeAndValidation, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IF22Package.QUESTION__TYPE_AND_VALIDATION, newTypeAndValidation, newTypeAndValidation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDef getVariable()
  {
    if (variable != null && variable.eIsProxy())
    {
      InternalEObject oldVariable = (InternalEObject)variable;
      variable = (VariableDef)eResolveProxy(oldVariable);
      if (variable != oldVariable)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, IF22Package.QUESTION__VARIABLE, oldVariable, variable));
      }
    }
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableDef basicGetVariable()
  {
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariable(VariableDef newVariable)
  {
    VariableDef oldVariable = variable;
    variable = newVariable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IF22Package.QUESTION__VARIABLE, oldVariable, variable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Target> getTargets()
  {
    if (targets == null)
    {
      targets = new EObjectContainmentEList<Target>(Target.class, this, IF22Package.QUESTION__TARGETS);
    }
    return targets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case IF22Package.QUESTION__TYPE_AND_VALIDATION:
        return basicSetTypeAndValidation(null, msgs);
      case IF22Package.QUESTION__TARGETS:
        return ((InternalEList<?>)getTargets()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IF22Package.QUESTION__TYPE_AND_VALIDATION:
        return getTypeAndValidation();
      case IF22Package.QUESTION__VARIABLE:
        if (resolve) return getVariable();
        return basicGetVariable();
      case IF22Package.QUESTION__TARGETS:
        return getTargets();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IF22Package.QUESTION__TYPE_AND_VALIDATION:
        setTypeAndValidation((Exp)newValue);
        return;
      case IF22Package.QUESTION__VARIABLE:
        setVariable((VariableDef)newValue);
        return;
      case IF22Package.QUESTION__TARGETS:
        getTargets().clear();
        getTargets().addAll((Collection<? extends Target>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IF22Package.QUESTION__TYPE_AND_VALIDATION:
        setTypeAndValidation((Exp)null);
        return;
      case IF22Package.QUESTION__VARIABLE:
        setVariable((VariableDef)null);
        return;
      case IF22Package.QUESTION__TARGETS:
        getTargets().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IF22Package.QUESTION__TYPE_AND_VALIDATION:
        return typeAndValidation != null;
      case IF22Package.QUESTION__VARIABLE:
        return variable != null;
      case IF22Package.QUESTION__TARGETS:
        return targets != null && !targets.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //QuestionImpl
