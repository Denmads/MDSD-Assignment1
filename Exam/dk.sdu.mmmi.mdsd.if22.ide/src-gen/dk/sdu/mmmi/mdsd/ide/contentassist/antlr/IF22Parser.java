/*
 * generated by Xtext 2.26.0
 */
package dk.sdu.mmmi.mdsd.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import dk.sdu.mmmi.mdsd.ide.contentassist.antlr.internal.InternalIF22Parser;
import dk.sdu.mmmi.mdsd.services.IF22GrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class IF22Parser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(IF22GrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, IF22GrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getScenarioAccess().getBodyAlternatives_4_0(), "rule__Scenario__BodyAlternatives_4_0");
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getTargetDestinationAccess().getAlternatives(), "rule__TargetDestination__Alternatives");
			builder.put(grammarAccess.getBooleanOperationAccess().getAlternatives_1_0(), "rule__BooleanOperation__Alternatives_1_0");
			builder.put(grammarAccess.getEqualityAccess().getAlternatives_1_0(), "rule__Equality__Alternatives_1_0");
			builder.put(grammarAccess.getLessGreaterThanAccess().getAlternatives_1_0(), "rule__LessGreaterThan__Alternatives_1_0");
			builder.put(grammarAccess.getAddSubAccess().getAlternatives_1_0(), "rule__AddSub__Alternatives_1_0");
			builder.put(grammarAccess.getMulDivAccess().getAlternatives_1_0(), "rule__MulDiv__Alternatives_1_0");
			builder.put(grammarAccess.getPrimitiveAccess().getAlternatives(), "rule__Primitive__Alternatives");
			builder.put(grammarAccess.getReferableAccess().getAlternatives(), "rule__Referable__Alternatives");
			builder.put(grammarAccess.getConstantAccess().getAlternatives(), "rule__Constant__Alternatives");
			builder.put(grammarAccess.getKeywordAccess().getAlternatives(), "rule__Keyword__Alternatives");
			builder.put(grammarAccess.getBOOLEANAccess().getAlternatives(), "rule__BOOLEAN__Alternatives");
			builder.put(grammarAccess.getIF22Access().getGroup(), "rule__IF22__Group__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_0(), "rule__Type__Group_0__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_1(), "rule__Type__Group_1__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_2(), "rule__Type__Group_2__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup_3(), "rule__Function__Group_3__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup_3_1(), "rule__Function__Group_3_1__0");
			builder.put(grammarAccess.getScenarioAccess().getGroup(), "rule__Scenario__Group__0");
			builder.put(grammarAccess.getScenarioAccess().getGroup_2(), "rule__Scenario__Group_2__0");
			builder.put(grammarAccess.getScenarioAccess().getGroup_2_1(), "rule__Scenario__Group_2_1__0");
			builder.put(grammarAccess.getScenarioAccess().getGroup_2_1_1(), "rule__Scenario__Group_2_1_1__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getVariableDefAccess().getGroup(), "rule__VariableDef__Group__0");
			builder.put(grammarAccess.getAnnounceAccess().getGroup(), "rule__Announce__Group__0");
			builder.put(grammarAccess.getQuestionAccess().getGroup(), "rule__Question__Group__0");
			builder.put(grammarAccess.getQuestionAccess().getGroup_5(), "rule__Question__Group_5__0");
			builder.put(grammarAccess.getEndAccess().getGroup(), "rule__End__Group__0");
			builder.put(grammarAccess.getTargetAccess().getGroup(), "rule__Target__Group__0");
			builder.put(grammarAccess.getTargetAccess().getGroup_2(), "rule__Target__Group_2__0");
			builder.put(grammarAccess.getTargetAccess().getGroup_2_2(), "rule__Target__Group_2_2__0");
			builder.put(grammarAccess.getTargetAccess().getGroup_3(), "rule__Target__Group_3__0");
			builder.put(grammarAccess.getTargetAccess().getGroup_4(), "rule__Target__Group_4__0");
			builder.put(grammarAccess.getEndingTargetAccess().getGroup(), "rule__EndingTarget__Group__0");
			builder.put(grammarAccess.getBooleanOperationAccess().getGroup(), "rule__BooleanOperation__Group__0");
			builder.put(grammarAccess.getBooleanOperationAccess().getGroup_1(), "rule__BooleanOperation__Group_1__0");
			builder.put(grammarAccess.getBooleanOperationAccess().getGroup_1_0_0(), "rule__BooleanOperation__Group_1_0_0__0");
			builder.put(grammarAccess.getBooleanOperationAccess().getGroup_1_0_1(), "rule__BooleanOperation__Group_1_0_1__0");
			builder.put(grammarAccess.getEqualityAccess().getGroup(), "rule__Equality__Group__0");
			builder.put(grammarAccess.getEqualityAccess().getGroup_1(), "rule__Equality__Group_1__0");
			builder.put(grammarAccess.getEqualityAccess().getGroup_1_0_0(), "rule__Equality__Group_1_0_0__0");
			builder.put(grammarAccess.getEqualityAccess().getGroup_1_0_1(), "rule__Equality__Group_1_0_1__0");
			builder.put(grammarAccess.getLessGreaterThanAccess().getGroup(), "rule__LessGreaterThan__Group__0");
			builder.put(grammarAccess.getLessGreaterThanAccess().getGroup_1(), "rule__LessGreaterThan__Group_1__0");
			builder.put(grammarAccess.getLessGreaterThanAccess().getGroup_1_0_0(), "rule__LessGreaterThan__Group_1_0_0__0");
			builder.put(grammarAccess.getLessGreaterThanAccess().getGroup_1_0_1(), "rule__LessGreaterThan__Group_1_0_1__0");
			builder.put(grammarAccess.getLessGreaterThanAccess().getGroup_1_0_2(), "rule__LessGreaterThan__Group_1_0_2__0");
			builder.put(grammarAccess.getLessGreaterThanAccess().getGroup_1_0_3(), "rule__LessGreaterThan__Group_1_0_3__0");
			builder.put(grammarAccess.getConcatenationAccess().getGroup(), "rule__Concatenation__Group__0");
			builder.put(grammarAccess.getConcatenationAccess().getGroup_1(), "rule__Concatenation__Group_1__0");
			builder.put(grammarAccess.getAddSubAccess().getGroup(), "rule__AddSub__Group__0");
			builder.put(grammarAccess.getAddSubAccess().getGroup_1(), "rule__AddSub__Group_1__0");
			builder.put(grammarAccess.getAddSubAccess().getGroup_1_0_0(), "rule__AddSub__Group_1_0_0__0");
			builder.put(grammarAccess.getAddSubAccess().getGroup_1_0_1(), "rule__AddSub__Group_1_0_1__0");
			builder.put(grammarAccess.getMulDivAccess().getGroup(), "rule__MulDiv__Group__0");
			builder.put(grammarAccess.getMulDivAccess().getGroup_1(), "rule__MulDiv__Group_1__0");
			builder.put(grammarAccess.getMulDivAccess().getGroup_1_0_0(), "rule__MulDiv__Group_1_0_0__0");
			builder.put(grammarAccess.getMulDivAccess().getGroup_1_0_1(), "rule__MulDiv__Group_1_0_1__0");
			builder.put(grammarAccess.getPrimitiveAccess().getGroup_0(), "rule__Primitive__Group_0__0");
			builder.put(grammarAccess.getPrimitiveAccess().getGroup_1(), "rule__Primitive__Group_1__0");
			builder.put(grammarAccess.getPrimitiveAccess().getGroup_4(), "rule__Primitive__Group_4__0");
			builder.put(grammarAccess.getConstantAccess().getGroup_0(), "rule__Constant__Group_0__0");
			builder.put(grammarAccess.getConstantAccess().getGroup_1(), "rule__Constant__Group_1__0");
			builder.put(grammarAccess.getConstantAccess().getGroup_2(), "rule__Constant__Group_2__0");
			builder.put(grammarAccess.getKeywordAccess().getGroup_0(), "rule__Keyword__Group_0__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup(), "rule__FunctionCall__Group__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_2(), "rule__FunctionCall__Group_2__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_2_1(), "rule__FunctionCall__Group_2_1__0");
			builder.put(grammarAccess.getBOOLEANAccess().getGroup_0(), "rule__BOOLEAN__Group_0__0");
			builder.put(grammarAccess.getBOOLEANAccess().getGroup_1(), "rule__BOOLEAN__Group_1__0");
			builder.put(grammarAccess.getIF22Access().getNameAssignment_1(), "rule__IF22__NameAssignment_1");
			builder.put(grammarAccess.getIF22Access().getFunctionsAssignment_2(), "rule__IF22__FunctionsAssignment_2");
			builder.put(grammarAccess.getIF22Access().getScenariosAssignment_3(), "rule__IF22__ScenariosAssignment_3");
			builder.put(grammarAccess.getFunctionAccess().getNameAssignment_1(), "rule__Function__NameAssignment_1");
			builder.put(grammarAccess.getFunctionAccess().getParameterTypesAssignment_3_0(), "rule__Function__ParameterTypesAssignment_3_0");
			builder.put(grammarAccess.getFunctionAccess().getParameterTypesAssignment_3_1_1(), "rule__Function__ParameterTypesAssignment_3_1_1");
			builder.put(grammarAccess.getFunctionAccess().getReturnTypeAssignment_6(), "rule__Function__ReturnTypeAssignment_6");
			builder.put(grammarAccess.getScenarioAccess().getNameAssignment_1(), "rule__Scenario__NameAssignment_1");
			builder.put(grammarAccess.getScenarioAccess().getParametersAssignment_2_1_0(), "rule__Scenario__ParametersAssignment_2_1_0");
			builder.put(grammarAccess.getScenarioAccess().getParametersAssignment_2_1_1_1(), "rule__Scenario__ParametersAssignment_2_1_1_1");
			builder.put(grammarAccess.getScenarioAccess().getBodyAssignment_4(), "rule__Scenario__BodyAssignment_4");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_0(), "rule__Parameter__NameAssignment_0");
			builder.put(grammarAccess.getParameterAccess().getTypeAssignment_2(), "rule__Parameter__TypeAssignment_2");
			builder.put(grammarAccess.getVariableDefAccess().getNameAssignment_1(), "rule__VariableDef__NameAssignment_1");
			builder.put(grammarAccess.getVariableDefAccess().getTypeAssignment_3(), "rule__VariableDef__TypeAssignment_3");
			builder.put(grammarAccess.getAnnounceAccess().getNameAssignment_1(), "rule__Announce__NameAssignment_1");
			builder.put(grammarAccess.getAnnounceAccess().getBodyAssignment_2(), "rule__Announce__BodyAssignment_2");
			builder.put(grammarAccess.getAnnounceAccess().getTargetsAssignment_3(), "rule__Announce__TargetsAssignment_3");
			builder.put(grammarAccess.getQuestionAccess().getNameAssignment_1(), "rule__Question__NameAssignment_1");
			builder.put(grammarAccess.getQuestionAccess().getBodyAssignment_2(), "rule__Question__BodyAssignment_2");
			builder.put(grammarAccess.getQuestionAccess().getTypeAndValidationAssignment_4(), "rule__Question__TypeAndValidationAssignment_4");
			builder.put(grammarAccess.getQuestionAccess().getVariableAssignment_5_1(), "rule__Question__VariableAssignment_5_1");
			builder.put(grammarAccess.getQuestionAccess().getTargetsAssignment_6(), "rule__Question__TargetsAssignment_6");
			builder.put(grammarAccess.getEndAccess().getNameAssignment_1(), "rule__End__NameAssignment_1");
			builder.put(grammarAccess.getEndAccess().getBodyAssignment_2(), "rule__End__BodyAssignment_2");
			builder.put(grammarAccess.getTargetAccess().getDestinationAssignment_1(), "rule__Target__DestinationAssignment_1");
			builder.put(grammarAccess.getTargetAccess().getArgumentsAssignment_2_1(), "rule__Target__ArgumentsAssignment_2_1");
			builder.put(grammarAccess.getTargetAccess().getArgumentsAssignment_2_2_1(), "rule__Target__ArgumentsAssignment_2_2_1");
			builder.put(grammarAccess.getTargetAccess().getConditionAssignment_3_1(), "rule__Target__ConditionAssignment_3_1");
			builder.put(grammarAccess.getTargetAccess().getEndTargetsAssignment_4_1(), "rule__Target__EndTargetsAssignment_4_1");
			builder.put(grammarAccess.getEndingTargetAccess().getEndStatementAssignment_1(), "rule__EndingTarget__EndStatementAssignment_1");
			builder.put(grammarAccess.getEndingTargetAccess().getTargetAssignment_2(), "rule__EndingTarget__TargetAssignment_2");
			builder.put(grammarAccess.getBooleanOperationAccess().getRightAssignment_1_1(), "rule__BooleanOperation__RightAssignment_1_1");
			builder.put(grammarAccess.getEqualityAccess().getRightAssignment_1_1(), "rule__Equality__RightAssignment_1_1");
			builder.put(grammarAccess.getLessGreaterThanAccess().getRightAssignment_1_1(), "rule__LessGreaterThan__RightAssignment_1_1");
			builder.put(grammarAccess.getConcatenationAccess().getRightAssignment_1_2(), "rule__Concatenation__RightAssignment_1_2");
			builder.put(grammarAccess.getAddSubAccess().getRightAssignment_1_1(), "rule__AddSub__RightAssignment_1_1");
			builder.put(grammarAccess.getMulDivAccess().getRightAssignment_1_1(), "rule__MulDiv__RightAssignment_1_1");
			builder.put(grammarAccess.getPrimitiveAccess().getBodyAssignment_0_2(), "rule__Primitive__BodyAssignment_0_2");
			builder.put(grammarAccess.getPrimitiveAccess().getBodyAssignment_1_2(), "rule__Primitive__BodyAssignment_1_2");
			builder.put(grammarAccess.getPrimitiveAccess().getVariableAssignment_4_1(), "rule__Primitive__VariableAssignment_4_1");
			builder.put(grammarAccess.getConstantAccess().getValueAssignment_0_1(), "rule__Constant__ValueAssignment_0_1");
			builder.put(grammarAccess.getConstantAccess().getValueAssignment_1_1(), "rule__Constant__ValueAssignment_1_1");
			builder.put(grammarAccess.getConstantAccess().getValueAssignment_2_1(), "rule__Constant__ValueAssignment_2_1");
			builder.put(grammarAccess.getFunctionCallAccess().getFunctionAssignment_0(), "rule__FunctionCall__FunctionAssignment_0");
			builder.put(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_2_0(), "rule__FunctionCall__ArgumentsAssignment_2_0");
			builder.put(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_2_1_1(), "rule__FunctionCall__ArgumentsAssignment_2_1_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private IF22GrammarAccess grammarAccess;

	@Override
	protected InternalIF22Parser createParser() {
		InternalIF22Parser result = new InternalIF22Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public IF22GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(IF22GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
