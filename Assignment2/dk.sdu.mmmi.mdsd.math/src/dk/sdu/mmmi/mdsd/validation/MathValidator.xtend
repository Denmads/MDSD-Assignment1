/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.validation

import org.eclipse.xtext.validation.Check
import dk.sdu.mmmi.mdsd.math.Statement
import dk.sdu.mmmi.mdsd.math.LocalVariable
import java.util.List
import dk.sdu.mmmi.mdsd.math.MathPackage
import dk.sdu.mmmi.mdsd.math.Expression
import dk.sdu.mmmi.mdsd.math.MathScript

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class MathValidator extends AbstractMathValidator {
	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					MathPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	
	public static val DUPLICATE_VAR = 'duplicateVar'
	
	@Check
	def checkVarScope(Statement stmt) {
		var globalVars = (stmt.eContainer as MathScript).eAllContents.filter(Statement).map[name].toList
		
		if (globalVars.filter[it == stmt.name].size > 1) {
			error('Multiple variables with same name!',
				MathPackage.Literals.VARIABLE__NAME,
				DUPLICATE_VAR
			)
			return
		}
		
		stmt.exp.checkExpression(globalVars)
	}
	
	def checkExpression(Expression exp, List<String> availableVars) {
		
	}
	
	def checkLetScope(LocalVariable local, List<String> availableVars) {
		
	}
	
}
