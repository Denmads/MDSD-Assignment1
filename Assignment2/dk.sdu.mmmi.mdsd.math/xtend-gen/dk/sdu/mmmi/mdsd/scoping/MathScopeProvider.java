/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.scoping;

import com.google.common.base.Objects;
import dk.sdu.mmmi.mdsd.math.LocalVariable;
import dk.sdu.mmmi.mdsd.math.MathPackage;
import dk.sdu.mmmi.mdsd.math.MathScript;
import dk.sdu.mmmi.mdsd.math.Statement;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class MathScopeProvider extends AbstractMathScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    boolean _equals = Objects.equal(reference, MathPackage.Literals.VARIABLE_REF__VALUE);
    if (_equals) {
      return this.getAvailableVarInScope(context);
    }
    return super.getScope(context, reference);
  }
  
  public IScope getAvailableVarInScope(final EObject context) {
    IScope _xblockexpression = null;
    {
      final EObject container = context.eContainer();
      IScope _switchResult = null;
      boolean _matched = false;
      if (container instanceof LocalVariable) {
        _matched=true;
        _switchResult = Scopes.scopeFor(CollectionLiterals.<LocalVariable>newArrayList(((LocalVariable)container)), this.getAvailableVarInScope(container));
      }
      if (!_matched) {
        if (container instanceof MathScript) {
          _matched=true;
          final Function1<Statement, Boolean> _function = (Statement it) -> {
            return Boolean.valueOf((!Objects.equal(it, context)));
          };
          _switchResult = Scopes.scopeFor(IterableExtensions.<Statement>filter(((MathScript)container).getStatements(), _function));
        }
      }
      if (!_matched) {
        _switchResult = this.getAvailableVarInScope(container);
      }
      _xblockexpression = _switchResult;
    }
    return _xblockexpression;
  }
}
