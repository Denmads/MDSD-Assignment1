/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.validation;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import dk.sdu.mmmi.mdsd.math.Expression;
import dk.sdu.mmmi.mdsd.math.LocalVariable;
import dk.sdu.mmmi.mdsd.math.MathPackage;
import dk.sdu.mmmi.mdsd.math.MathScript;
import dk.sdu.mmmi.mdsd.math.Statement;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class MathValidator extends AbstractMathValidator {
  public static final String DUPLICATE_VAR = "duplicateVar";
  
  @Check
  public void checkVarScope(final Statement stmt) {
    EObject _eContainer = stmt.eContainer();
    final Function1<Statement, String> _function = (Statement it) -> {
      return it.getName();
    };
    List<String> globalVars = IteratorExtensions.<String>toList(IteratorExtensions.<Statement, String>map(Iterators.<Statement>filter(((MathScript) _eContainer).eAllContents(), Statement.class), _function));
    final Function1<String, Boolean> _function_1 = (String it) -> {
      String _name = stmt.getName();
      return Boolean.valueOf(Objects.equal(it, _name));
    };
    int _size = IterableExtensions.size(IterableExtensions.<String>filter(globalVars, _function_1));
    boolean _greaterThan = (_size > 1);
    if (_greaterThan) {
      this.error("Multiple variables with same name!", 
        MathPackage.Literals.VARIABLE__NAME, 
        MathValidator.DUPLICATE_VAR);
      return;
    }
    this.checkExpression(stmt.getExp(), globalVars);
  }
  
  public Object checkExpression(final Expression exp, final List<String> availableVars) {
    return null;
  }
  
  public Object checkLetScope(final LocalVariable local, final List<String> availableVars) {
    return null;
  }
}
