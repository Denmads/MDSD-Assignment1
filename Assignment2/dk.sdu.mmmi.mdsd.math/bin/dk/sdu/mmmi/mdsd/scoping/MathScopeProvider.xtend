/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import dk.sdu.mmmi.mdsd.math.VariableRef
import dk.sdu.mmmi.mdsd.math.MathPackage
import dk.sdu.mmmi.mdsd.math.Variable
import java.util.List
import org.eclipse.xtext.scoping.Scopes
import dk.sdu.mmmi.mdsd.math.MathScript
import dk.sdu.mmmi.mdsd.math.Statement
import dk.sdu.mmmi.mdsd.math.LocalVariable
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.EcoreUtil2
import java.util.Collections
import java.util.ArrayList
import dk.sdu.mmmi.mdsd.math.Expression

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MathScopeProvider extends AbstractMathScopeProvider {
	
	override getScope(EObject context, EReference reference) {
		if (reference == MathPackage.Literals.VARIABLE_REF__VALUE) {
			return context.availableVarInScope
		}
		return super.getScope(context, reference);
	}
	
	def IScope getAvailableVarInScope(EObject context) {
		val container = context.eContainer
		switch (container) {
			LocalVariable: Scopes.scopeFor(newArrayList(container), container.availableVarInScope)
			MathScript: Scopes.scopeFor(container.statements.filter[it != context])
			default: container.availableVarInScope
		}
	}
}
