/*
 * generated by Xtext 2.26.0
 */
package dk.sdu.mmmi.mdsd.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class X21GrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class X21Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.X21");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cX21Action_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProgramKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_3_0 = (RuleCall)cDeclarationsAssignment_3.eContents().get(0);
		
		//X21:
		//    {X21} 'program' ID declarations+=Declaration*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{X21} 'program' ID declarations+=Declaration*
		public Group getGroup() { return cGroup; }
		
		//{X21}
		public Action getX21Action_0() { return cX21Action_0; }
		
		//'program'
		public Keyword getProgramKeyword_1() { return cProgramKeyword_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_3() { return cDeclarationsAssignment_3; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_3_0() { return cDeclarationsDeclarationParserRuleCall_3_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInputParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNodeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStreamParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDataDeclParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cParameterParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Declaration:
		//    Function | Input | Node | Stream | DataDecl | Parameter
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Function | Input | Node | Stream | DataDecl | Parameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_0() { return cFunctionParserRuleCall_0; }
		
		//Input
		public RuleCall getInputParserRuleCall_1() { return cInputParserRuleCall_1; }
		
		//Node
		public RuleCall getNodeParserRuleCall_2() { return cNodeParserRuleCall_2; }
		
		//Stream
		public RuleCall getStreamParserRuleCall_3() { return cStreamParserRuleCall_3; }
		
		//DataDecl
		public RuleCall getDataDeclParserRuleCall_4() { return cDataDeclParserRuleCall_4; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_5() { return cParameterParserRuleCall_5; }
	}
	public class NameAndTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.NameAndType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//fragment NameAndType:
		//    name=ID ':' type=Type
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=Type
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNameAndTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Parameter:
		//    'parameter' NameAndType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'parameter' NameAndType
		public Group getGroup() { return cGroup; }
		
		//'parameter'
		public Keyword getParameterKeyword_0() { return cParameterKeyword_0; }
		
		//NameAndType
		public RuleCall getNameAndTypeParserRuleCall_1() { return cNameAndTypeParserRuleCall_1; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyLambdaParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//Function:
		//    'function' name=ID body=Lambda
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=ID body=Lambda
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//body=Lambda
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//Lambda
		public RuleCall getBodyLambdaParserRuleCall_2_0() { return cBodyLambdaParserRuleCall_2_0; }
	}
	public class LambdaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.Lambda");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNameAndTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLogicAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLogicExpParserRuleCall_4_0 = (RuleCall)cLogicAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Lambda:
		//    '(' NameAndType ')' '{' logic=Exp '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' NameAndType ')' '{' logic=Exp '}'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//NameAndType
		public RuleCall getNameAndTypeParserRuleCall_1() { return cNameAndTypeParserRuleCall_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//logic=Exp
		public Assignment getLogicAssignment_4() { return cLogicAssignment_4; }
		
		//Exp
		public RuleCall getLogicExpParserRuleCall_4_0() { return cLogicExpParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNameAndTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Input:
		//    'input' NameAndType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'input' NameAndType
		public Group getGroup() { return cGroup; }
		
		//'input'
		public Keyword getInputKeyword_0() { return cInputKeyword_0; }
		
		//NameAndType
		public RuleCall getNameAndTypeParserRuleCall_1() { return cNameAndTypeParserRuleCall_1; }
	}
	public class FunctionOrLambdaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.FunctionOrLambda");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cFunctionReferenceAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cRefAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final CrossReference cRefFunctionCrossReference_1_0_1_0 = (CrossReference)cRefAssignment_1_0_1.eContents().get(0);
		private final RuleCall cRefFunctionIDTerminalRuleCall_1_0_1_0_1 = (RuleCall)cRefFunctionCrossReference_1_0_1_0.eContents().get(1);
		private final RuleCall cLambdaParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FunctionOrLambda:
		//    '[' ({FunctionReference} ref=[Function] | Lambda) ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' ({FunctionReference} ref=[Function] | Lambda) ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//({FunctionReference} ref=[Function] | Lambda)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{FunctionReference} ref=[Function]
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{FunctionReference}
		public Action getFunctionReferenceAction_1_0_0() { return cFunctionReferenceAction_1_0_0; }
		
		//ref=[Function]
		public Assignment getRefAssignment_1_0_1() { return cRefAssignment_1_0_1; }
		
		//[Function]
		public CrossReference getRefFunctionCrossReference_1_0_1_0() { return cRefFunctionCrossReference_1_0_1_0; }
		
		//ID
		public RuleCall getRefFunctionIDTerminalRuleCall_1_0_1_0_1() { return cRefFunctionIDTerminalRuleCall_1_0_1_0_1; }
		
		//Lambda
		public RuleCall getLambdaParserRuleCall_1_1() { return cLambdaParserRuleCall_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyFunctionOrLambdaParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//Node:
		//    'node' name=ID body=FunctionOrLambda
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'node' name=ID body=FunctionOrLambda
		public Group getGroup() { return cGroup; }
		
		//'node'
		public Keyword getNodeKeyword_0() { return cNodeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//body=FunctionOrLambda
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//FunctionOrLambda
		public RuleCall getBodyFunctionOrLambdaParserRuleCall_2_0() { return cBodyFunctionOrLambdaParserRuleCall_2_0; }
	}
	public class NodeOrInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.NodeOrInput");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInputParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NodeOrInput:
		//    Node | Input
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Node | Input
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Node
		public RuleCall getNodeParserRuleCall_0() { return cNodeParserRuleCall_0; }
		
		//Input
		public RuleCall getInputParserRuleCall_1() { return cInputParserRuleCall_1; }
	}
	public class StreamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.Stream");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStreamKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStartNodesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartNodesNodeOrInputParserRuleCall_1_0 = (RuleCall)cStartNodesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStartNodesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStartNodesNodeOrInputParserRuleCall_2_1_0 = (RuleCall)cStartNodesAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cToKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPointsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPointsElementListParserRuleCall_3_1_0 = (RuleCall)cPointsAssignment_3_1.eContents().get(0);
		
		//Stream:
		//    'stream' startNodes+=NodeOrInput (',' startNodes+=NodeOrInput)* ('to' points+=ElementList)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'stream' startNodes+=NodeOrInput (',' startNodes+=NodeOrInput)* ('to' points+=ElementList)+
		public Group getGroup() { return cGroup; }
		
		//'stream'
		public Keyword getStreamKeyword_0() { return cStreamKeyword_0; }
		
		//startNodes+=NodeOrInput
		public Assignment getStartNodesAssignment_1() { return cStartNodesAssignment_1; }
		
		//NodeOrInput
		public RuleCall getStartNodesNodeOrInputParserRuleCall_1_0() { return cStartNodesNodeOrInputParserRuleCall_1_0; }
		
		//(',' startNodes+=NodeOrInput)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//startNodes+=NodeOrInput
		public Assignment getStartNodesAssignment_2_1() { return cStartNodesAssignment_2_1; }
		
		//NodeOrInput
		public RuleCall getStartNodesNodeOrInputParserRuleCall_2_1_0() { return cStartNodesNodeOrInputParserRuleCall_2_1_0; }
		
		//('to' points+=ElementList)+
		public Group getGroup_3() { return cGroup_3; }
		
		//'to'
		public Keyword getToKeyword_3_0() { return cToKeyword_3_0; }
		
		//points+=ElementList
		public Assignment getPointsAssignment_3_1() { return cPointsAssignment_3_1; }
		
		//ElementList
		public RuleCall getPointsElementListParserRuleCall_3_1_0() { return cPointsElementListParserRuleCall_3_1_0; }
	}
	public class ElementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.ElementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsElementParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		//ElementList:
		//    elements+=Element (',' elements+=Element)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Element (',' elements+=Element)*
		public Group getGroup() { return cGroup; }
		
		//elements+=Element
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_0_0() { return cElementsElementParserRuleCall_0_0; }
		
		//(',' elements+=Element)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//elements+=Element
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_1_1_0() { return cElementsElementParserRuleCall_1_1_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNodeRefAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cRefAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cRefNodeParserRuleCall_0_1_0 = (RuleCall)cRefAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAnonymousLambdaAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cBodyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBodyLambdaParserRuleCall_1_1_0 = (RuleCall)cBodyAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cOutputAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cOutputKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cNameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_2_0 = (RuleCall)cNameAssignment_2_2.eContents().get(0);
		
		//Element:
		//    {NodeRef} ref=Node | {AnonymousLambda} body=Lambda | {Output} 'output' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{NodeRef} ref=Node | {AnonymousLambda} body=Lambda | {Output} 'output' name=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{NodeRef} ref=Node
		public Group getGroup_0() { return cGroup_0; }
		
		//{NodeRef}
		public Action getNodeRefAction_0_0() { return cNodeRefAction_0_0; }
		
		//ref=Node
		public Assignment getRefAssignment_0_1() { return cRefAssignment_0_1; }
		
		//Node
		public RuleCall getRefNodeParserRuleCall_0_1_0() { return cRefNodeParserRuleCall_0_1_0; }
		
		//{AnonymousLambda} body=Lambda
		public Group getGroup_1() { return cGroup_1; }
		
		//{AnonymousLambda}
		public Action getAnonymousLambdaAction_1_0() { return cAnonymousLambdaAction_1_0; }
		
		//body=Lambda
		public Assignment getBodyAssignment_1_1() { return cBodyAssignment_1_1; }
		
		//Lambda
		public RuleCall getBodyLambdaParserRuleCall_1_1_0() { return cBodyLambdaParserRuleCall_1_1_0; }
		
		//{Output} 'output' name=ID
		public Group getGroup_2() { return cGroup_2; }
		
		//{Output}
		public Action getOutputAction_2_0() { return cOutputAction_2_0; }
		
		//'output'
		public Keyword getOutputKeyword_2_1() { return cOutputKeyword_2_1; }
		
		//name=ID
		public Assignment getNameAssignment_2_2() { return cNameAssignment_2_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_2_0() { return cNameIDTerminalRuleCall_2_2_0; }
	}
	public class DataDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.DataDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariablesDataVariableParserRuleCall_3_0 = (RuleCall)cVariablesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVariablesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVariablesDataVariableParserRuleCall_4_1_0 = (RuleCall)cVariablesAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DataDecl:
		//    'data' name=ID '{' variables+=DataVariable (',' variables+=DataVariable)* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'data' name=ID '{' variables+=DataVariable (',' variables+=DataVariable)* '}'
		public Group getGroup() { return cGroup; }
		
		//'data'
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//variables+=DataVariable
		public Assignment getVariablesAssignment_3() { return cVariablesAssignment_3; }
		
		//DataVariable
		public RuleCall getVariablesDataVariableParserRuleCall_3_0() { return cVariablesDataVariableParserRuleCall_3_0; }
		
		//(',' variables+=DataVariable)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//variables+=DataVariable
		public Assignment getVariablesAssignment_4_1() { return cVariablesAssignment_4_1; }
		
		//DataVariable
		public RuleCall getVariablesDataVariableParserRuleCall_4_1_0() { return cVariablesDataVariableParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DataVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.DataVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//DataVariable:
		//    name=ID ':' type=Type
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=Type
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cIntKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cStringKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cCustomTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cRefAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRefDataDeclCrossReference_2_1_0 = (CrossReference)cRefAssignment_2_1.eContents().get(0);
		private final RuleCall cRefDataDeclIDTerminalRuleCall_2_1_0_1 = (RuleCall)cRefDataDeclCrossReference_2_1_0.eContents().get(1);
		
		//Type:
		//    {IntType} 'int' | {StringType} 'string' | {CustomType} ref=[DataDecl]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntType} 'int' | {StringType} 'string' | {CustomType} ref=[DataDecl]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntType} 'int'
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntType}
		public Action getIntTypeAction_0_0() { return cIntTypeAction_0_0; }
		
		//'int'
		public Keyword getIntKeyword_0_1() { return cIntKeyword_0_1; }
		
		//{StringType} 'string'
		public Group getGroup_1() { return cGroup_1; }
		
		//{StringType}
		public Action getStringTypeAction_1_0() { return cStringTypeAction_1_0; }
		
		//'string'
		public Keyword getStringKeyword_1_1() { return cStringKeyword_1_1; }
		
		//{CustomType} ref=[DataDecl]
		public Group getGroup_2() { return cGroup_2; }
		
		//{CustomType}
		public Action getCustomTypeAction_2_0() { return cCustomTypeAction_2_0; }
		
		//ref=[DataDecl]
		public Assignment getRefAssignment_2_1() { return cRefAssignment_2_1; }
		
		//[DataDecl]
		public CrossReference getRefDataDeclCrossReference_2_1_0() { return cRefDataDeclCrossReference_2_1_0; }
		
		//ID
		public RuleCall getRefDataDeclIDTerminalRuleCall_2_1_0_1() { return cRefDataDeclIDTerminalRuleCall_2_1_0_1; }
	}
	public class LogicExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.LogicExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cEqualsLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cLessThanLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cGreaterThanLeftAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Action cLessThanOrEqualsLeftAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Action cGreaterThanOrEqualsLeftAction_1_4_0 = (Action)cGroup_1_4.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightExpParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//LogicExp:
		//    Exp (
		//        {Equals.left=current} '=' |
		//        {LessThan.left = current} '<' |
		//        {GreaterThan.left = current} '>' |
		//        {LessThanOrEquals.left = current} '<=' |
		//        {GreaterThanOrEquals.left = current} '>='
		//    ) right=Exp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Exp (
		//    {Equals.left=current} '=' |
		//    {LessThan.left = current} '<' |
		//    {GreaterThan.left = current} '>' |
		//    {LessThanOrEquals.left = current} '<=' |
		//    {GreaterThanOrEquals.left = current} '>='
		//) right=Exp
		public Group getGroup() { return cGroup; }
		
		//Exp
		public RuleCall getExpParserRuleCall_0() { return cExpParserRuleCall_0; }
		
		//(
		//       {Equals.left=current} '=' |
		//       {LessThan.left = current} '<' |
		//       {GreaterThan.left = current} '>' |
		//       {LessThanOrEquals.left = current} '<=' |
		//       {GreaterThanOrEquals.left = current} '>='
		//   )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{Equals.left=current} '='
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Equals.left=current}
		public Action getEqualsLeftAction_1_0_0() { return cEqualsLeftAction_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0_1() { return cEqualsSignKeyword_1_0_1; }
		
		//{LessThan.left = current} '<'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{LessThan.left = current}
		public Action getLessThanLeftAction_1_1_0() { return cLessThanLeftAction_1_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_1_1() { return cLessThanSignKeyword_1_1_1; }
		
		//{GreaterThan.left = current} '>'
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{GreaterThan.left = current}
		public Action getGreaterThanLeftAction_1_2_0() { return cGreaterThanLeftAction_1_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_2_1() { return cGreaterThanSignKeyword_1_2_1; }
		
		//{LessThanOrEquals.left = current} '<='
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//{LessThanOrEquals.left = current}
		public Action getLessThanOrEqualsLeftAction_1_3_0() { return cLessThanOrEqualsLeftAction_1_3_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_3_1() { return cLessThanSignEqualsSignKeyword_1_3_1; }
		
		//{GreaterThanOrEquals.left = current} '>='
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//{GreaterThanOrEquals.left = current}
		public Action getGreaterThanOrEqualsLeftAction_1_4_0() { return cGreaterThanOrEqualsLeftAction_1_4_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_4_1() { return cGreaterThanSignEqualsSignKeyword_1_4_1; }
		
		//right=Exp
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//Exp
		public RuleCall getRightExpParserRuleCall_2_0() { return cRightExpParserRuleCall_2_0; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.Exp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1 = (Action)cAlternatives_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMulDivParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Exp:
		//    MulDiv (({Plus.left=current} '+' | {Minus.left=current}) right=MulDiv)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MulDiv (({Plus.left=current} '+' | {Minus.left=current}) right=MulDiv)*
		public Group getGroup() { return cGroup; }
		
		//MulDiv
		public RuleCall getMulDivParserRuleCall_0() { return cMulDivParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current}) right=MulDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Plus.left=current} '+' | {Minus.left=current})
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1() { return cMinusLeftAction_1_0_1; }
		
		//right=MulDiv
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MulDiv
		public RuleCall getRightMulDivParserRuleCall_1_1_0() { return cRightMulDivParserRuleCall_1_1_0; }
	}
	public class MulDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.MulDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMulLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MulDiv:
		//    Primary (({Mul.left=current} '*' | {Div.left=current} '/') right=Primary)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary (({Mul.left=current} '*' | {Div.left=current} '/') right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//(({Mul.left=current} '*' | {Div.left=current} '/') right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Mul.left=current} '*' | {Div.left=current} '/')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Mul.left=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Mul.left=current}
		public Action getMulLeftAction_1_0_0_0() { return cMulLeftAction_1_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }
		
		//{Div.left=current} '/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_1_0() { return cRightPrimaryParserRuleCall_1_1_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cParenthesisAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cBodyAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cBodyExpParserRuleCall_1_2_0 = (RuleCall)cBodyAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final RuleCall cLetStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDataAccessParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNoneParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIfStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cNewStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Primary:
		//    {Int} value=INT | {Parenthesis} '(' body=Exp ')' | LetStatement | DataAccess | None | IfStatement | NewStatement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Int} value=INT | {Parenthesis} '(' body=Exp ')' | LetStatement | DataAccess | None | IfStatement | NewStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Int} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{Int}
		public Action getIntAction_0_0() { return cIntAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{Parenthesis} '(' body=Exp ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Parenthesis}
		public Action getParenthesisAction_1_0() { return cParenthesisAction_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//body=Exp
		public Assignment getBodyAssignment_1_2() { return cBodyAssignment_1_2; }
		
		//Exp
		public RuleCall getBodyExpParserRuleCall_1_2_0() { return cBodyExpParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//LetStatement
		public RuleCall getLetStatementParserRuleCall_2() { return cLetStatementParserRuleCall_2; }
		
		//DataAccess
		public RuleCall getDataAccessParserRuleCall_3() { return cDataAccessParserRuleCall_3; }
		
		//None
		public RuleCall getNoneParserRuleCall_4() { return cNoneParserRuleCall_4; }
		
		//IfStatement
		public RuleCall getIfStatementParserRuleCall_5() { return cIfStatementParserRuleCall_5; }
		
		//NewStatement
		public RuleCall getNewStatementParserRuleCall_6() { return cNewStatementParserRuleCall_6; }
	}
	public class LetStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.LetStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyExpParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//LetStatement:
		//    'let' name=ID '=' value=Exp 'in' body=Exp 'end'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'let' name=ID '=' value=Exp 'in' body=Exp 'end'
		public Group getGroup() { return cGroup; }
		
		//'let'
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=Exp
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Exp
		public RuleCall getValueExpParserRuleCall_3_0() { return cValueExpParserRuleCall_3_0; }
		
		//'in'
		public Keyword getInKeyword_4() { return cInKeyword_4; }
		
		//body=Exp
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }
		
		//Exp
		public RuleCall getBodyExpParserRuleCall_5_0() { return cBodyExpParserRuleCall_5_0; }
		
		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}
	public class DataAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.DataAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefDataRefCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefDataRefIDTerminalRuleCall_0_0_1 = (RuleCall)cRefDataRefCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVarRefsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cVarRefsDataVariableCrossReference_1_1_0 = (CrossReference)cVarRefsAssignment_1_1.eContents().get(0);
		private final RuleCall cVarRefsDataVariableIDTerminalRuleCall_1_1_0_1 = (RuleCall)cVarRefsDataVariableCrossReference_1_1_0.eContents().get(1);
		
		//DataAccess:
		//    ref=[DataRef] ('.' varRefs+=[DataVariable])*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[DataRef] ('.' varRefs+=[DataVariable])*
		public Group getGroup() { return cGroup; }
		
		//ref=[DataRef]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//[DataRef]
		public CrossReference getRefDataRefCrossReference_0_0() { return cRefDataRefCrossReference_0_0; }
		
		//ID
		public RuleCall getRefDataRefIDTerminalRuleCall_0_0_1() { return cRefDataRefIDTerminalRuleCall_0_0_1; }
		
		//('.' varRefs+=[DataVariable])*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//varRefs+=[DataVariable]
		public Assignment getVarRefsAssignment_1_1() { return cVarRefsAssignment_1_1; }
		
		//[DataVariable]
		public CrossReference getVarRefsDataVariableCrossReference_1_1_0() { return cVarRefsDataVariableCrossReference_1_1_0; }
		
		//ID
		public RuleCall getVarRefsDataVariableIDTerminalRuleCall_1_1_0_1() { return cVarRefsDataVariableIDTerminalRuleCall_1_1_0_1; }
	}
	public class DataRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.DataRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParameterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLetStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLambdaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DataRef:
		//    Parameter | LetStatement | Lambda
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameter | LetStatement | Lambda
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_0() { return cParameterParserRuleCall_0; }
		
		//LetStatement
		public RuleCall getLetStatementParserRuleCall_1() { return cLetStatementParserRuleCall_1; }
		
		//Lambda
		public RuleCall getLambdaParserRuleCall_2() { return cLambdaParserRuleCall_2; }
	}
	public class NoneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.None");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNoneAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNoneKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//None:
		//    {None} 'none'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{None} 'none'
		public Group getGroup() { return cGroup; }
		
		//{None}
		public Action getNoneAction_0() { return cNoneAction_0; }
		
		//'none'
		public Keyword getNoneKeyword_1() { return cNoneKeyword_1; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionLogicExpParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTrueExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTrueExpExpParserRuleCall_3_0 = (RuleCall)cTrueExpAssignment_3.eContents().get(0);
		private final Keyword cElseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFalseExpAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFalseExpExpParserRuleCall_5_0 = (RuleCall)cFalseExpAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IfStatement:
		//    'if' condition=LogicExp 'then' trueExp=Exp 'else' falseExp=Exp 'end'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' condition=LogicExp 'then' trueExp=Exp 'else' falseExp=Exp 'end'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=LogicExp
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//LogicExp
		public RuleCall getConditionLogicExpParserRuleCall_1_0() { return cConditionLogicExpParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//trueExp=Exp
		public Assignment getTrueExpAssignment_3() { return cTrueExpAssignment_3; }
		
		//Exp
		public RuleCall getTrueExpExpParserRuleCall_3_0() { return cTrueExpExpParserRuleCall_3_0; }
		
		//'else'
		public Keyword getElseKeyword_4() { return cElseKeyword_4; }
		
		//falseExp=Exp
		public Assignment getFalseExpAssignment_5() { return cFalseExpAssignment_5; }
		
		//Exp
		public RuleCall getFalseExpExpParserRuleCall_5_0() { return cFalseExpExpParserRuleCall_5_0; }
		
		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}
	public class NewStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.NewStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDataDeclParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariablesVarAssignmentParserRuleCall_3_0 = (RuleCall)cVariablesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVariablesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVariablesVarAssignmentParserRuleCall_4_1_0 = (RuleCall)cVariablesAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//NewStatement:
		//    'new' type=DataDecl '[' variables+=VarAssignment (',' variables+=VarAssignment)* ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'new' type=DataDecl '[' variables+=VarAssignment (',' variables+=VarAssignment)* ']'
		public Group getGroup() { return cGroup; }
		
		//'new'
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }
		
		//type=DataDecl
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//DataDecl
		public RuleCall getTypeDataDeclParserRuleCall_1_0() { return cTypeDataDeclParserRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//variables+=VarAssignment
		public Assignment getVariablesAssignment_3() { return cVariablesAssignment_3; }
		
		//VarAssignment
		public RuleCall getVariablesVarAssignmentParserRuleCall_3_0() { return cVariablesVarAssignmentParserRuleCall_3_0; }
		
		//(',' variables+=VarAssignment)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//variables+=VarAssignment
		public Assignment getVariablesAssignment_4_1() { return cVariablesAssignment_4_1; }
		
		//VarAssignment
		public RuleCall getVariablesVarAssignmentParserRuleCall_4_1_0() { return cVariablesVarAssignmentParserRuleCall_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class VarAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.X21.VarAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableDataVariableCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableDataVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cVariableDataVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//VarAssignment:
		//    variable=[DataVariable] '=' value=Exp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[DataVariable] '=' value=Exp
		public Group getGroup() { return cGroup; }
		
		//variable=[DataVariable]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//[DataVariable]
		public CrossReference getVariableDataVariableCrossReference_0_0() { return cVariableDataVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getVariableDataVariableIDTerminalRuleCall_0_0_1() { return cVariableDataVariableIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Exp
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Exp
		public RuleCall getValueExpParserRuleCall_2_0() { return cValueExpParserRuleCall_2_0; }
	}
	
	
	private final X21Elements pX21;
	private final DeclarationElements pDeclaration;
	private final NameAndTypeElements pNameAndType;
	private final ParameterElements pParameter;
	private final FunctionElements pFunction;
	private final LambdaElements pLambda;
	private final InputElements pInput;
	private final FunctionOrLambdaElements pFunctionOrLambda;
	private final NodeElements pNode;
	private final NodeOrInputElements pNodeOrInput;
	private final StreamElements pStream;
	private final ElementListElements pElementList;
	private final ElementElements pElement;
	private final DataDeclElements pDataDecl;
	private final DataVariableElements pDataVariable;
	private final TypeElements pType;
	private final LogicExpElements pLogicExp;
	private final ExpElements pExp;
	private final MulDivElements pMulDiv;
	private final PrimaryElements pPrimary;
	private final LetStatementElements pLetStatement;
	private final DataAccessElements pDataAccess;
	private final DataRefElements pDataRef;
	private final NoneElements pNone;
	private final IfStatementElements pIfStatement;
	private final NewStatementElements pNewStatement;
	private final VarAssignmentElements pVarAssignment;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public X21GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pX21 = new X21Elements();
		this.pDeclaration = new DeclarationElements();
		this.pNameAndType = new NameAndTypeElements();
		this.pParameter = new ParameterElements();
		this.pFunction = new FunctionElements();
		this.pLambda = new LambdaElements();
		this.pInput = new InputElements();
		this.pFunctionOrLambda = new FunctionOrLambdaElements();
		this.pNode = new NodeElements();
		this.pNodeOrInput = new NodeOrInputElements();
		this.pStream = new StreamElements();
		this.pElementList = new ElementListElements();
		this.pElement = new ElementElements();
		this.pDataDecl = new DataDeclElements();
		this.pDataVariable = new DataVariableElements();
		this.pType = new TypeElements();
		this.pLogicExp = new LogicExpElements();
		this.pExp = new ExpElements();
		this.pMulDiv = new MulDivElements();
		this.pPrimary = new PrimaryElements();
		this.pLetStatement = new LetStatementElements();
		this.pDataAccess = new DataAccessElements();
		this.pDataRef = new DataRefElements();
		this.pNone = new NoneElements();
		this.pIfStatement = new IfStatementElements();
		this.pNewStatement = new NewStatementElements();
		this.pVarAssignment = new VarAssignmentElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.sdu.mmmi.mdsd.X21".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//X21:
	//    {X21} 'program' ID declarations+=Declaration*
	//;
	public X21Elements getX21Access() {
		return pX21;
	}
	
	public ParserRule getX21Rule() {
		return getX21Access().getRule();
	}
	
	//Declaration:
	//    Function | Input | Node | Stream | DataDecl | Parameter
	//;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//fragment NameAndType:
	//    name=ID ':' type=Type
	//;
	public NameAndTypeElements getNameAndTypeAccess() {
		return pNameAndType;
	}
	
	public ParserRule getNameAndTypeRule() {
		return getNameAndTypeAccess().getRule();
	}
	
	//Parameter:
	//    'parameter' NameAndType
	//;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Function:
	//    'function' name=ID body=Lambda
	//;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Lambda:
	//    '(' NameAndType ')' '{' logic=Exp '}'
	//;
	public LambdaElements getLambdaAccess() {
		return pLambda;
	}
	
	public ParserRule getLambdaRule() {
		return getLambdaAccess().getRule();
	}
	
	//Input:
	//    'input' NameAndType
	//;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//FunctionOrLambda:
	//    '[' ({FunctionReference} ref=[Function] | Lambda) ']'
	//;
	public FunctionOrLambdaElements getFunctionOrLambdaAccess() {
		return pFunctionOrLambda;
	}
	
	public ParserRule getFunctionOrLambdaRule() {
		return getFunctionOrLambdaAccess().getRule();
	}
	
	//Node:
	//    'node' name=ID body=FunctionOrLambda
	//;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//NodeOrInput:
	//    Node | Input
	//;
	public NodeOrInputElements getNodeOrInputAccess() {
		return pNodeOrInput;
	}
	
	public ParserRule getNodeOrInputRule() {
		return getNodeOrInputAccess().getRule();
	}
	
	//Stream:
	//    'stream' startNodes+=NodeOrInput (',' startNodes+=NodeOrInput)* ('to' points+=ElementList)+
	//;
	public StreamElements getStreamAccess() {
		return pStream;
	}
	
	public ParserRule getStreamRule() {
		return getStreamAccess().getRule();
	}
	
	//ElementList:
	//    elements+=Element (',' elements+=Element)*
	//;
	public ElementListElements getElementListAccess() {
		return pElementList;
	}
	
	public ParserRule getElementListRule() {
		return getElementListAccess().getRule();
	}
	
	//Element:
	//    {NodeRef} ref=Node | {AnonymousLambda} body=Lambda | {Output} 'output' name=ID
	//;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//DataDecl:
	//    'data' name=ID '{' variables+=DataVariable (',' variables+=DataVariable)* '}'
	//;
	public DataDeclElements getDataDeclAccess() {
		return pDataDecl;
	}
	
	public ParserRule getDataDeclRule() {
		return getDataDeclAccess().getRule();
	}
	
	//DataVariable:
	//    name=ID ':' type=Type
	//;
	public DataVariableElements getDataVariableAccess() {
		return pDataVariable;
	}
	
	public ParserRule getDataVariableRule() {
		return getDataVariableAccess().getRule();
	}
	
	//Type:
	//    {IntType} 'int' | {StringType} 'string' | {CustomType} ref=[DataDecl]
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//LogicExp:
	//    Exp (
	//        {Equals.left=current} '=' |
	//        {LessThan.left = current} '<' |
	//        {GreaterThan.left = current} '>' |
	//        {LessThanOrEquals.left = current} '<=' |
	//        {GreaterThanOrEquals.left = current} '>='
	//    ) right=Exp
	//;
	public LogicExpElements getLogicExpAccess() {
		return pLogicExp;
	}
	
	public ParserRule getLogicExpRule() {
		return getLogicExpAccess().getRule();
	}
	
	//Exp:
	//    MulDiv (({Plus.left=current} '+' | {Minus.left=current}) right=MulDiv)*
	//;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//MulDiv:
	//    Primary (({Mul.left=current} '*' | {Div.left=current} '/') right=Primary)*
	//;
	public MulDivElements getMulDivAccess() {
		return pMulDiv;
	}
	
	public ParserRule getMulDivRule() {
		return getMulDivAccess().getRule();
	}
	
	//Primary:
	//    {Int} value=INT | {Parenthesis} '(' body=Exp ')' | LetStatement | DataAccess | None | IfStatement | NewStatement
	//;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//LetStatement:
	//    'let' name=ID '=' value=Exp 'in' body=Exp 'end'
	//;
	public LetStatementElements getLetStatementAccess() {
		return pLetStatement;
	}
	
	public ParserRule getLetStatementRule() {
		return getLetStatementAccess().getRule();
	}
	
	//DataAccess:
	//    ref=[DataRef] ('.' varRefs+=[DataVariable])*
	//;
	public DataAccessElements getDataAccessAccess() {
		return pDataAccess;
	}
	
	public ParserRule getDataAccessRule() {
		return getDataAccessAccess().getRule();
	}
	
	//DataRef:
	//    Parameter | LetStatement | Lambda
	//;
	public DataRefElements getDataRefAccess() {
		return pDataRef;
	}
	
	public ParserRule getDataRefRule() {
		return getDataRefAccess().getRule();
	}
	
	//None:
	//    {None} 'none'
	//;
	public NoneElements getNoneAccess() {
		return pNone;
	}
	
	public ParserRule getNoneRule() {
		return getNoneAccess().getRule();
	}
	
	//IfStatement:
	//    'if' condition=LogicExp 'then' trueExp=Exp 'else' falseExp=Exp 'end'
	//;
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//NewStatement:
	//    'new' type=DataDecl '[' variables+=VarAssignment (',' variables+=VarAssignment)* ']'
	//;
	public NewStatementElements getNewStatementAccess() {
		return pNewStatement;
	}
	
	public ParserRule getNewStatementRule() {
		return getNewStatementAccess().getRule();
	}
	
	//VarAssignment:
	//    variable=[DataVariable] '=' value=Exp
	//;
	public VarAssignmentElements getVarAssignmentAccess() {
		return pVarAssignment;
	}
	
	public ParserRule getVarAssignmentRule() {
		return getVarAssignmentAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
