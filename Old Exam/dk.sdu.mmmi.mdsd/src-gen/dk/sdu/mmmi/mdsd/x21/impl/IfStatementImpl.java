/**
 * generated by Xtext 2.26.0
 */
package dk.sdu.mmmi.mdsd.x21.impl;

import dk.sdu.mmmi.mdsd.x21.Exp;
import dk.sdu.mmmi.mdsd.x21.IfStatement;
import dk.sdu.mmmi.mdsd.x21.LogicExp;
import dk.sdu.mmmi.mdsd.x21.X21Package;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>If Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dk.sdu.mmmi.mdsd.x21.impl.IfStatementImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link dk.sdu.mmmi.mdsd.x21.impl.IfStatementImpl#getTrueExp <em>True Exp</em>}</li>
 *   <li>{@link dk.sdu.mmmi.mdsd.x21.impl.IfStatementImpl#getFalseExp <em>False Exp</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IfStatementImpl extends PrimaryImpl implements IfStatement
{
  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected LogicExp condition;

  /**
   * The cached value of the '{@link #getTrueExp() <em>True Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTrueExp()
   * @generated
   * @ordered
   */
  protected Exp trueExp;

  /**
   * The cached value of the '{@link #getFalseExp() <em>False Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFalseExp()
   * @generated
   * @ordered
   */
  protected Exp falseExp;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IfStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return X21Package.Literals.IF_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicExp getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(LogicExp newCondition, NotificationChain msgs)
  {
    LogicExp oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, X21Package.IF_STATEMENT__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCondition(LogicExp newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - X21Package.IF_STATEMENT__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - X21Package.IF_STATEMENT__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, X21Package.IF_STATEMENT__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exp getTrueExp()
  {
    return trueExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTrueExp(Exp newTrueExp, NotificationChain msgs)
  {
    Exp oldTrueExp = trueExp;
    trueExp = newTrueExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, X21Package.IF_STATEMENT__TRUE_EXP, oldTrueExp, newTrueExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTrueExp(Exp newTrueExp)
  {
    if (newTrueExp != trueExp)
    {
      NotificationChain msgs = null;
      if (trueExp != null)
        msgs = ((InternalEObject)trueExp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - X21Package.IF_STATEMENT__TRUE_EXP, null, msgs);
      if (newTrueExp != null)
        msgs = ((InternalEObject)newTrueExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - X21Package.IF_STATEMENT__TRUE_EXP, null, msgs);
      msgs = basicSetTrueExp(newTrueExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, X21Package.IF_STATEMENT__TRUE_EXP, newTrueExp, newTrueExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exp getFalseExp()
  {
    return falseExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFalseExp(Exp newFalseExp, NotificationChain msgs)
  {
    Exp oldFalseExp = falseExp;
    falseExp = newFalseExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, X21Package.IF_STATEMENT__FALSE_EXP, oldFalseExp, newFalseExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFalseExp(Exp newFalseExp)
  {
    if (newFalseExp != falseExp)
    {
      NotificationChain msgs = null;
      if (falseExp != null)
        msgs = ((InternalEObject)falseExp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - X21Package.IF_STATEMENT__FALSE_EXP, null, msgs);
      if (newFalseExp != null)
        msgs = ((InternalEObject)newFalseExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - X21Package.IF_STATEMENT__FALSE_EXP, null, msgs);
      msgs = basicSetFalseExp(newFalseExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, X21Package.IF_STATEMENT__FALSE_EXP, newFalseExp, newFalseExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case X21Package.IF_STATEMENT__CONDITION:
        return basicSetCondition(null, msgs);
      case X21Package.IF_STATEMENT__TRUE_EXP:
        return basicSetTrueExp(null, msgs);
      case X21Package.IF_STATEMENT__FALSE_EXP:
        return basicSetFalseExp(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case X21Package.IF_STATEMENT__CONDITION:
        return getCondition();
      case X21Package.IF_STATEMENT__TRUE_EXP:
        return getTrueExp();
      case X21Package.IF_STATEMENT__FALSE_EXP:
        return getFalseExp();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case X21Package.IF_STATEMENT__CONDITION:
        setCondition((LogicExp)newValue);
        return;
      case X21Package.IF_STATEMENT__TRUE_EXP:
        setTrueExp((Exp)newValue);
        return;
      case X21Package.IF_STATEMENT__FALSE_EXP:
        setFalseExp((Exp)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case X21Package.IF_STATEMENT__CONDITION:
        setCondition((LogicExp)null);
        return;
      case X21Package.IF_STATEMENT__TRUE_EXP:
        setTrueExp((Exp)null);
        return;
      case X21Package.IF_STATEMENT__FALSE_EXP:
        setFalseExp((Exp)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case X21Package.IF_STATEMENT__CONDITION:
        return condition != null;
      case X21Package.IF_STATEMENT__TRUE_EXP:
        return trueExp != null;
      case X21Package.IF_STATEMENT__FALSE_EXP:
        return falseExp != null;
    }
    return super.eIsSet(featureID);
  }

} //IfStatementImpl
