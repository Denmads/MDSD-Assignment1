/**
 * generated by Xtext 2.26.0
 */
package dk.sdu.mmmi.mdsd.x21.impl;

import dk.sdu.mmmi.mdsd.x21.DataAccess;
import dk.sdu.mmmi.mdsd.x21.DataRef;
import dk.sdu.mmmi.mdsd.x21.DataVariable;
import dk.sdu.mmmi.mdsd.x21.X21Package;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Data Access</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dk.sdu.mmmi.mdsd.x21.impl.DataAccessImpl#getRef <em>Ref</em>}</li>
 *   <li>{@link dk.sdu.mmmi.mdsd.x21.impl.DataAccessImpl#getVarRefs <em>Var Refs</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DataAccessImpl extends PrimaryImpl implements DataAccess
{
  /**
   * The cached value of the '{@link #getRef() <em>Ref</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRef()
   * @generated
   * @ordered
   */
  protected DataRef ref;

  /**
   * The cached value of the '{@link #getVarRefs() <em>Var Refs</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVarRefs()
   * @generated
   * @ordered
   */
  protected EList<DataVariable> varRefs;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DataAccessImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return X21Package.Literals.DATA_ACCESS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataRef getRef()
  {
    if (ref != null && ref.eIsProxy())
    {
      InternalEObject oldRef = (InternalEObject)ref;
      ref = (DataRef)eResolveProxy(oldRef);
      if (ref != oldRef)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, X21Package.DATA_ACCESS__REF, oldRef, ref));
      }
    }
    return ref;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataRef basicGetRef()
  {
    return ref;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRef(DataRef newRef)
  {
    DataRef oldRef = ref;
    ref = newRef;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, X21Package.DATA_ACCESS__REF, oldRef, ref));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<DataVariable> getVarRefs()
  {
    if (varRefs == null)
    {
      varRefs = new EObjectResolvingEList<DataVariable>(DataVariable.class, this, X21Package.DATA_ACCESS__VAR_REFS);
    }
    return varRefs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case X21Package.DATA_ACCESS__REF:
        if (resolve) return getRef();
        return basicGetRef();
      case X21Package.DATA_ACCESS__VAR_REFS:
        return getVarRefs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case X21Package.DATA_ACCESS__REF:
        setRef((DataRef)newValue);
        return;
      case X21Package.DATA_ACCESS__VAR_REFS:
        getVarRefs().clear();
        getVarRefs().addAll((Collection<? extends DataVariable>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case X21Package.DATA_ACCESS__REF:
        setRef((DataRef)null);
        return;
      case X21Package.DATA_ACCESS__VAR_REFS:
        getVarRefs().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case X21Package.DATA_ACCESS__REF:
        return ref != null;
      case X21Package.DATA_ACCESS__VAR_REFS:
        return varRefs != null && !varRefs.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //DataAccessImpl
