/*
 * generated by Xtext 2.26.0
 */
package dk.sdu.mmmi.mdsd.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import dk.sdu.mmmi.mdsd.ide.contentassist.antlr.internal.InternalX21Parser;
import dk.sdu.mmmi.mdsd.services.X21GrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class X21Parser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(X21GrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, X21GrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDeclarationAccess().getAlternatives(), "rule__Declaration__Alternatives");
			builder.put(grammarAccess.getFunctionOrLambdaAccess().getAlternatives_1(), "rule__FunctionOrLambda__Alternatives_1");
			builder.put(grammarAccess.getNodeOrInputAccess().getAlternatives(), "rule__NodeOrInput__Alternatives");
			builder.put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getLogicExpAccess().getAlternatives_1(), "rule__LogicExp__Alternatives_1");
			builder.put(grammarAccess.getExpAccess().getAlternatives_1_0(), "rule__Exp__Alternatives_1_0");
			builder.put(grammarAccess.getMulDivAccess().getAlternatives_1_0(), "rule__MulDiv__Alternatives_1_0");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getDataRefAccess().getAlternatives(), "rule__DataRef__Alternatives");
			builder.put(grammarAccess.getX21Access().getGroup(), "rule__X21__Group__0");
			builder.put(grammarAccess.getNameAndTypeAccess().getGroup(), "rule__NameAndType__Group__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
			builder.put(grammarAccess.getLambdaAccess().getGroup(), "rule__Lambda__Group__0");
			builder.put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
			builder.put(grammarAccess.getFunctionOrLambdaAccess().getGroup(), "rule__FunctionOrLambda__Group__0");
			builder.put(grammarAccess.getFunctionOrLambdaAccess().getGroup_1_0(), "rule__FunctionOrLambda__Group_1_0__0");
			builder.put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
			builder.put(grammarAccess.getStreamAccess().getGroup(), "rule__Stream__Group__0");
			builder.put(grammarAccess.getStreamAccess().getGroup_2(), "rule__Stream__Group_2__0");
			builder.put(grammarAccess.getStreamAccess().getGroup_3(), "rule__Stream__Group_3__0");
			builder.put(grammarAccess.getElementListAccess().getGroup(), "rule__ElementList__Group__0");
			builder.put(grammarAccess.getElementListAccess().getGroup_1(), "rule__ElementList__Group_1__0");
			builder.put(grammarAccess.getElementAccess().getGroup_0(), "rule__Element__Group_0__0");
			builder.put(grammarAccess.getElementAccess().getGroup_1(), "rule__Element__Group_1__0");
			builder.put(grammarAccess.getElementAccess().getGroup_2(), "rule__Element__Group_2__0");
			builder.put(grammarAccess.getDataDeclAccess().getGroup(), "rule__DataDecl__Group__0");
			builder.put(grammarAccess.getDataDeclAccess().getGroup_4(), "rule__DataDecl__Group_4__0");
			builder.put(grammarAccess.getDataVariableAccess().getGroup(), "rule__DataVariable__Group__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_0(), "rule__Type__Group_0__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_1(), "rule__Type__Group_1__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_2(), "rule__Type__Group_2__0");
			builder.put(grammarAccess.getLogicExpAccess().getGroup(), "rule__LogicExp__Group__0");
			builder.put(grammarAccess.getLogicExpAccess().getGroup_1_0(), "rule__LogicExp__Group_1_0__0");
			builder.put(grammarAccess.getLogicExpAccess().getGroup_1_1(), "rule__LogicExp__Group_1_1__0");
			builder.put(grammarAccess.getLogicExpAccess().getGroup_1_2(), "rule__LogicExp__Group_1_2__0");
			builder.put(grammarAccess.getLogicExpAccess().getGroup_1_3(), "rule__LogicExp__Group_1_3__0");
			builder.put(grammarAccess.getLogicExpAccess().getGroup_1_4(), "rule__LogicExp__Group_1_4__0");
			builder.put(grammarAccess.getExpAccess().getGroup(), "rule__Exp__Group__0");
			builder.put(grammarAccess.getExpAccess().getGroup_1(), "rule__Exp__Group_1__0");
			builder.put(grammarAccess.getExpAccess().getGroup_1_0_0(), "rule__Exp__Group_1_0_0__0");
			builder.put(grammarAccess.getMulDivAccess().getGroup(), "rule__MulDiv__Group__0");
			builder.put(grammarAccess.getMulDivAccess().getGroup_1(), "rule__MulDiv__Group_1__0");
			builder.put(grammarAccess.getMulDivAccess().getGroup_1_0_0(), "rule__MulDiv__Group_1_0_0__0");
			builder.put(grammarAccess.getMulDivAccess().getGroup_1_0_1(), "rule__MulDiv__Group_1_0_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_0(), "rule__Primary__Group_0__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
			builder.put(grammarAccess.getLetStatementAccess().getGroup(), "rule__LetStatement__Group__0");
			builder.put(grammarAccess.getDataAccessAccess().getGroup(), "rule__DataAccess__Group__0");
			builder.put(grammarAccess.getDataAccessAccess().getGroup_1(), "rule__DataAccess__Group_1__0");
			builder.put(grammarAccess.getNoneAccess().getGroup(), "rule__None__Group__0");
			builder.put(grammarAccess.getIfStatementAccess().getGroup(), "rule__IfStatement__Group__0");
			builder.put(grammarAccess.getNewStatementAccess().getGroup(), "rule__NewStatement__Group__0");
			builder.put(grammarAccess.getNewStatementAccess().getGroup_4(), "rule__NewStatement__Group_4__0");
			builder.put(grammarAccess.getVarAssignmentAccess().getGroup(), "rule__VarAssignment__Group__0");
			builder.put(grammarAccess.getX21Access().getDeclarationsAssignment_3(), "rule__X21__DeclarationsAssignment_3");
			builder.put(grammarAccess.getNameAndTypeAccess().getNameAssignment_0(), "rule__NameAndType__NameAssignment_0");
			builder.put(grammarAccess.getNameAndTypeAccess().getTypeAssignment_2(), "rule__NameAndType__TypeAssignment_2");
			builder.put(grammarAccess.getFunctionAccess().getNameAssignment_1(), "rule__Function__NameAssignment_1");
			builder.put(grammarAccess.getFunctionAccess().getBodyAssignment_2(), "rule__Function__BodyAssignment_2");
			builder.put(grammarAccess.getLambdaAccess().getLogicAssignment_4(), "rule__Lambda__LogicAssignment_4");
			builder.put(grammarAccess.getFunctionOrLambdaAccess().getRefAssignment_1_0_1(), "rule__FunctionOrLambda__RefAssignment_1_0_1");
			builder.put(grammarAccess.getNodeAccess().getNameAssignment_1(), "rule__Node__NameAssignment_1");
			builder.put(grammarAccess.getNodeAccess().getBodyAssignment_2(), "rule__Node__BodyAssignment_2");
			builder.put(grammarAccess.getStreamAccess().getStartNodesAssignment_1(), "rule__Stream__StartNodesAssignment_1");
			builder.put(grammarAccess.getStreamAccess().getStartNodesAssignment_2_1(), "rule__Stream__StartNodesAssignment_2_1");
			builder.put(grammarAccess.getStreamAccess().getPointsAssignment_3_1(), "rule__Stream__PointsAssignment_3_1");
			builder.put(grammarAccess.getElementListAccess().getElementsAssignment_0(), "rule__ElementList__ElementsAssignment_0");
			builder.put(grammarAccess.getElementListAccess().getElementsAssignment_1_1(), "rule__ElementList__ElementsAssignment_1_1");
			builder.put(grammarAccess.getElementAccess().getRefAssignment_0_1(), "rule__Element__RefAssignment_0_1");
			builder.put(grammarAccess.getElementAccess().getBodyAssignment_1_1(), "rule__Element__BodyAssignment_1_1");
			builder.put(grammarAccess.getElementAccess().getNameAssignment_2_2(), "rule__Element__NameAssignment_2_2");
			builder.put(grammarAccess.getDataDeclAccess().getNameAssignment_1(), "rule__DataDecl__NameAssignment_1");
			builder.put(grammarAccess.getDataDeclAccess().getVariablesAssignment_3(), "rule__DataDecl__VariablesAssignment_3");
			builder.put(grammarAccess.getDataDeclAccess().getVariablesAssignment_4_1(), "rule__DataDecl__VariablesAssignment_4_1");
			builder.put(grammarAccess.getDataVariableAccess().getNameAssignment_0(), "rule__DataVariable__NameAssignment_0");
			builder.put(grammarAccess.getDataVariableAccess().getTypeAssignment_2(), "rule__DataVariable__TypeAssignment_2");
			builder.put(grammarAccess.getTypeAccess().getDeclarationAssignment_2_1(), "rule__Type__DeclarationAssignment_2_1");
			builder.put(grammarAccess.getLogicExpAccess().getRightAssignment_2(), "rule__LogicExp__RightAssignment_2");
			builder.put(grammarAccess.getExpAccess().getRightAssignment_1_1(), "rule__Exp__RightAssignment_1_1");
			builder.put(grammarAccess.getMulDivAccess().getRightAssignment_1_1(), "rule__MulDiv__RightAssignment_1_1");
			builder.put(grammarAccess.getPrimaryAccess().getValueAssignment_0_1(), "rule__Primary__ValueAssignment_0_1");
			builder.put(grammarAccess.getPrimaryAccess().getBodyAssignment_1_2(), "rule__Primary__BodyAssignment_1_2");
			builder.put(grammarAccess.getLetStatementAccess().getNameAssignment_1(), "rule__LetStatement__NameAssignment_1");
			builder.put(grammarAccess.getLetStatementAccess().getValueAssignment_3(), "rule__LetStatement__ValueAssignment_3");
			builder.put(grammarAccess.getLetStatementAccess().getBodyAssignment_5(), "rule__LetStatement__BodyAssignment_5");
			builder.put(grammarAccess.getDataAccessAccess().getRefAssignment_0(), "rule__DataAccess__RefAssignment_0");
			builder.put(grammarAccess.getDataAccessAccess().getVarRefsAssignment_1_1(), "rule__DataAccess__VarRefsAssignment_1_1");
			builder.put(grammarAccess.getIfStatementAccess().getConditionAssignment_1(), "rule__IfStatement__ConditionAssignment_1");
			builder.put(grammarAccess.getIfStatementAccess().getTrueExpAssignment_3(), "rule__IfStatement__TrueExpAssignment_3");
			builder.put(grammarAccess.getIfStatementAccess().getFalseExpAssignment_5(), "rule__IfStatement__FalseExpAssignment_5");
			builder.put(grammarAccess.getNewStatementAccess().getTypeAssignment_1(), "rule__NewStatement__TypeAssignment_1");
			builder.put(grammarAccess.getNewStatementAccess().getVariablesAssignment_3(), "rule__NewStatement__VariablesAssignment_3");
			builder.put(grammarAccess.getNewStatementAccess().getVariablesAssignment_4_1(), "rule__NewStatement__VariablesAssignment_4_1");
			builder.put(grammarAccess.getVarAssignmentAccess().getVariableAssignment_0(), "rule__VarAssignment__VariableAssignment_0");
			builder.put(grammarAccess.getVarAssignmentAccess().getValueAssignment_2(), "rule__VarAssignment__ValueAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private X21GrammarAccess grammarAccess;

	@Override
	protected InternalX21Parser createParser() {
		InternalX21Parser result = new InternalX21Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public X21GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(X21GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
